(()=>{"use strict";const t=class{constructor(t){this.aside=t,this.closeAsideBtn=document.querySelector(".closeAside"),this.asideContainer=document.querySelector(".asideContainer"),this.deleteTaskBtn=document.querySelector(".deleteTask"),this.editTaskBtn=document.querySelector(".editTask")}loadUI(){this.closeAsideBtn.addEventListener("click",(()=>{this.closeAside()})),this.deleteTaskBtn.addEventListener("click",(()=>{this.closeAside(),this.aside.mediator.notify(this.aside,"deleteTask",this.aside.currTask)})),this.editTaskBtn.addEventListener("click",(()=>{this.aside.mediator.notify(this.aside,"editTask",this.aside.currTask)}))}closeAside(){this.asideContainer.style.width="0px",this.aside.mediator.notify(this.aside,"asideClosed",null)}openAside(){this.aside.mediator.notify(this.aside,"asideOpened",null),this.asideContainer.style.width="240px"}},e=class{constructor(){this.taskTitleElement=document.querySelector(".taskTitle"),this.checklistElement=document.querySelector(".checklist"),this.dueDateElement=document.querySelector(".duedate"),this.noteElement=document.querySelector(".note"),this.createDateElement=document.querySelector(".createDate"),this.priorityElement=document.querySelector(".priority")}renderTaskInfo(t){this.taskTitleElement.textContent=t.title,this.dueDateElement.textContent=`Due-Date: ${t.dueDate}`,this.noteElement.textContent=t.note,this.priorityElement.textContent=`Priority: ${t.priority}`,this.createDateElement.textContent=`Created on: ${t.createDate}`,this.checklistElement.innerHTML="";for(let e of t.checklist){let t=document.createElement("li");t.textContent=e,this.checklistElement.appendChild(t)}}},i=class{constructor(){this.defaultList=document.querySelector(".projects.default"),this.userList=document.querySelector(".projects.user")}createElement(t,e=[]){let i=document.createElement(t);return e.forEach((t=>{i.classList.add(t)})),i}createTitleElement(t){let e=this.createElement("p",["title"]);return e.textContent=t,e}createTaskCounter(t){let e=this.createElement("p",["taskCount"]);return e.textContent=t,e}createProjectItem(t,e){let i=this.createElement("li");return i.dataset.uid=t,i.appendChild(this.createTitleElement(e.title)),e.todoList.length>0&&i.appendChild(this.createTaskCounter(e.todoList.length)),i}renderProjects(t){this.defaultList.innerHTML="",this.userList.innerHTML="";for(let[e,i]of t){let t=this.createProjectItem(e,i);"default"===i.type?this.defaultList.appendChild(t):this.userList.appendChild(t)}}},s=class{constructor(t){this.sidenav=t,this.sidenavContainer=document.querySelector(".sidenavContainer"),this.addProjectBtn=document.querySelector("#addProject"),this.closeSidenavBtn=document.querySelector("#closeSidenav"),this.openSidenavBtn=document.querySelector("#openSidenav")}loadUI(){this.addProjectBtn.addEventListener("click",(t=>{this.sidenav.mediator.notify(this.sidenav,"newProject",null)})),this.closeSidenavBtn.addEventListener("click",(()=>{this.closeSideNav()})),this.openSidenavBtn.addEventListener("click",(()=>{this.openSideNav()})),window.addEventListener("resize",(()=>{window.innerWidth>=800&&this.sidenavContainer.removeAttribute("style")})),this.sidenavContainer.addEventListener("click",(t=>{let e=t.target.closest("li")?.dataset.uid;e&&(this.sidenav.mediator.notify(this.sidenav,"projectSelected",this.sidenav.projectMap.get(e)),this.closeSideNav())}))}openSideNav(){this.sidenavContainer.style.width="240px",this.sidenav.mediator.notify(this.sidenav,"sidenavOpened",null)}closeSideNav(){this.sidenavContainer.removeAttribute("style"),this.sidenav.mediator.notify(this.sidenav,"sidenavClosed",null)}},r=class{constructor(t){this.main=t,this.taskList=document.querySelector(".tasklist"),this.addTaskBtn=document.querySelector(".addTask"),this.deleteProjectBtn=document.querySelector(".deleteProject"),this.editProjectBtn=document.querySelector(".editProject")}loadUI(){this.addTaskBtn.addEventListener("click",(()=>{this.main.mediator.notify(this.main,"newTask",null)})),this.deleteProjectBtn.addEventListener("click",(()=>{this.main.mediator.notify(this.main,"deleteProject",this.main.currProject)})),this.editProjectBtn.addEventListener("click",(()=>{this.main.mediator.notify(this.main,"editProject",this.main.currProject)})),this.taskList.addEventListener("click",(t=>{let e=t.target.dataset.uid;e&&this.main.mediator.notify(this.main,"taskSelected",this.main.taskMap.get(e))}))}},o=class{constructor(){this.tasklistContainer=document.querySelector(".tasklist"),this.titleElement=document.querySelector(".projectTitle"),this.btnGroup=document.querySelector(".btnGroup")}createTaskItem(t,e){let i=document.createElement("li");return i.dataset.uid=t,i.textContent=e,i}renderTasks(t,e){this.btnVisibility(t),this.tasklistContainer.innerHTML="",this.titleElement.textContent=t.title;for(let[t,i]of e){let e=this.createTaskItem(t,i.title);this.tasklistContainer.appendChild(e)}}btnVisibility(t){"default"==t.type?this.btnGroup.style.display="none":this.btnGroup.style.display="block"}},a=class{static loadProjectData(t){document.querySelector("#projectTitleInput").value=t.title}static loadTodoData(t){document.querySelector("#taskTitleInput").value=t.title,document.querySelector("#duedateInput").value=t.dueDate,document.querySelector("#priorityInput").value=t.priority,document.querySelector("#noteInput").value=t.note}static getProjectData(){return{title:document.querySelector("#projectTitleInput").value}}static getTodoData(){return{title:document.querySelector("#taskTitleInput").value,dueDate:document.querySelector("#duedateInput").value,priority:document.querySelector("#priorityInput").value,note:document.querySelector("#noteInput").value}}},n=class{constructor(t){this.form=t,this.submitAction=null,this.projectModal=document.querySelector(".projectModal"),this.taskModal=document.querySelector(".taskModal"),this.projectForm=document.querySelector(".projectModal form"),this.taskForm=document.querySelector(".taskModal form"),this.closeFormBtns=document.querySelectorAll('button[data-action="closeForm"]')}loadUI(){this.projectForm.addEventListener("submit",(()=>{let t=a.getProjectData();this.projectForm.reset(),this.form.mediator.notify(this.form,"new"==this.submitAction?"addProject":"modifyProject",t)})),this.taskForm.addEventListener("submit",(()=>{let t=a.getTodoData();this.taskForm.reset(),this.form.mediator.notify(this.form,"new"==this.submitAction?"addTask":"modifyTask",t)})),this.closeFormBtns.forEach((t=>{t.addEventListener("click",(t=>{t.target.closest(".modalBox").close()}))}))}showProjectForm(t){t?(this.submitAction="edit",a.loadProjectData(t)):this.submitAction="new",this.projectModal.showModal()}showTaskForm(t){t?(this.submitAction="edit",a.loadTodoData(t)):this.submitAction="new",this.taskModal.showModal()}},c=class{constructor({title:t="",todoList:e=[],type:i="user"}={}){this.title=t,this.todoList=e,this.type=i}addTodo(t){this.todoList.push(t)}removeTodo(t){this.todoList=this.todoList.filter((e=>e!==t))}};class d{constructor({title:t="",dueDate:e="",priority:i="",checklist:s=[],isComplete:r=!1,note:o="",createDate:a=(new Date).toDateString()}={}){this.title=t,this.dueDate=e,this.priority=i,this.checklist=s,this.isComplete=r,this.note=o,this.createDate=a}addStep(t){this.checklist.push(t)}changeStatus(){this.isComplete=!this.isComplete}changePriority(t){this.priority=t}changeDueDate(t){this.dueDate=t}}const l=new class{constructor(){this.mediator=null,this.currProjectList=null,this.currProject=null,this.currTask=null}getCurrProjectList(){return this.currProjectList}getCurrProject(){return this.currProject}getCurrTask(){return this.currTask}setProjectList(t){this.currProjectList=t}setProject(t){this.currProject=t}setTask(t){this.currTasklist=t}setMediator(t){this.mediator=t}receiveNotification(t,e){"projectsLoaded"==t?this.currProjectList=e:"projectSelected"==t?this.currProject=e:"taskSelected"==t&&(this.currTask=e)}},h=l,u={title:"Complete Project Proposal",dueDate:"2023-12-31",priority:"High",checklist:["Research","Outline","Draft"],isComplete:!1,note:"Important project for the upcoming deadline.",createDate:(new Date).toDateString()},m={title:"Buy Groceries",dueDate:"2023-12-25",priority:"Medium",checklist:["Milk","Bread","Eggs","Fruits"],isComplete:!1,note:"Don't forget to buy fresh vegetables!",createDate:(new Date).toDateString()},p={title:"Gym Workout",dueDate:"2023-12-28",priority:"Low",checklist:["Cardio","Weights","Stretching"],isComplete:!1,note:"Focus on leg exercises today.",createDate:(new Date).toDateString()},k={title:"Book Flight Tickets",dueDate:"2024-01-15",priority:"High",checklist:["Check passport","Choose seats","Confirm dates"],isComplete:!1,note:"Check for any travel restrictions due to COVID-19.",createDate:(new Date).toDateString()},j=[new d(u),new d(m),new d(p),new d(k)],y=[new c({title:"Today",type:"default"}),new c({title:"Important",type:"default"}),new c({title:"Completed",type:"default"}),new c({title:"Tasks",todoList:j,type:"default"})],f=new class{constructor(){this.components=new Set}register(t){this.components.add(t),t.setMediator(this)}unregister(t){this.components.delete(t),t.setMediator(null)}notify(t,e,i){console.log(e),this.components.forEach((s=>{s!==t&&s.receiveNotification(e,i)}))}},v=new class{constructor(){this.mediator=null,this.projectList=new Set}getProjects(){return this.projectList}addProject(t){this.projectList.add(t)}removeProject(t){this.projectList.delete(t)}setMediator(t){this.mediator=t}receiveNotification(t,e){"addProject"==t&&(this.addProject(new c(e)),this.mediator.notify(this,"projectAdded",null)),"deleteProject"==t&&(this.removeProject(e),this.mediator.notify(this,"projectDeleted",null)),"modifyProject"==t&&(Object.assign(h.currProject,e),this.mediator.notify(this,"projectEdited",null)),"addTask"==t&&(h.currProject.addTodo(new d(e)),this.mediator.notify(this,"taskAdded",null)),"deleteTask"==t&&(h.currProject.removeTodo(e),this.mediator.notify(this,"taskDeleted",null)),"modifyTask"==t&&(Object.assign(h.currTask,e),this.mediator.notify(this,"taskEdited",null))}};y.forEach((t=>{v.addProject(t)}));const S=new class{constructor(t){this.mediator=null,this.projectMap=new Map,this.projectList=t,this.sidenavDOM=new i,this.sidenavUI=new s(this)}init(){this.refresh(),this.sidenavUI.loadUI(),this.selectDefaultProject()}loadProjectListData(){this.projectMap.clear();for(let t of this.projectList)this.projectMap.set(this.getUID(),t)}selectDefaultProject(){this.mediator.notify(this,"projectSelected",this.projectMap.values().next().value)}refresh(){this.loadProjectListData(),this.sidenavDOM.renderProjects(this.projectMap),this.mediator.notify(this,"projectsLoaded",this.projectList)}setMediator(t){this.mediator=t}receiveNotification(t,e){"asideOpened"==t&&this.sidenavUI.closeSideNav(),"projectAdded"!=t&&"taskAdded"!=t&&"taskDeleted"!=t&&"projectEdited"!=t||this.refresh(),"projectDeleted"==t&&(this.refresh(),this.selectDefaultProject())}getUID(){return Math.floor(1e9*Math.random()).toString(36)}}(v.getProjects()),T=new class{constructor(){this.currTask=null,this.mediator=null,this.asideUI=new t(this),this.asideDOM=new e}init(){this.asideUI.loadUI()}refresh(){this.asideDOM.renderTaskInfo(this.currTask)}showTaskInfo(){this.refresh(),this.asideUI.openAside()}setCurrTask(t){this.currTask=t}setMediator(t){this.mediator=t}receiveNotification(t,e){"taskSelected"==t&&(this.setCurrTask(e),this.showTaskInfo()),"sidenavOpened"!=t&&"projectSelected"!=t||this.asideUI.closeAside(),"taskEdited"==t&&this.refresh()}},D=new class{constructor(){this.currProject=null,this.taskMap=new Map,this.mediator=null,this.mainUI=new r(this),this.mainDOM=new o}init(){this.mainUI.loadUI()}refresh(){this.loadProjectData(),this.mainDOM.renderTasks(this.currProject,this.taskMap)}loadProjectData(){this.taskMap.clear(),this.currProject.todoList.forEach((t=>{this.taskMap.set(this.getUID(),t)}))}getUID(){return Math.floor(1e9*Math.random()).toString(36)}setMediator(t){this.mediator=t}receiveNotification(t,e){"projectSelected"==t&&(this.currProject=e,this.refresh()),"taskAdded"!=t&&"taskDeleted"!=t&&"taskEdited"!=t&&"projectEdited"!=t||this.refresh()}},P=new class{constructor(){this.formUI=new n(this),this.mediator=null}init(){this.formUI.loadUI()}setMediator(t){this.mediator=t}receiveNotification(t,e){"newProject"!=t&&"editProject"!=t||this.formUI.showProjectForm(e),"newTask"!=t&&"editTask"!=t||this.formUI.showTaskForm(e)}};f.register(S),f.register(D),f.register(T),f.register(P),f.register(h),f.register(v),S.init(),D.init(),T.init(),P.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,