(()=>{"use strict";const t=class{constructor(t){this.aside=t,this.closeAsideBtn=document.querySelector(".closeAside"),this.asideContainer=document.querySelector(".asideContainer")}loadUI(){this.closeAsideBtn.addEventListener("click",(()=>{this.closeAside()}))}closeAside(){this.asideContainer.style.width="0px",this.aside.mediator.notify(this.aside,"asideClosed",null)}openAside(){this.aside.mediator.notify(this.aside,"asideOpened",null),this.asideContainer.style.width="240px"}},e=class{constructor(){this.taskTitleElement=document.querySelector(".taskTitle"),this.checklistElement=document.querySelector(".checklist"),this.dueDateElement=document.querySelector(".duedate"),this.noteElement=document.querySelector(".note"),this.createDateElement=document.querySelector(".createDate"),this.priorityElement=document.querySelector(".priority")}renderTaskInfo(t){this.taskTitleElement.textContent=t.title,this.dueDateElement.textContent=t.dueDate,this.noteElement.textContent=t.note,this.priorityElement.textContent=t.priority,this.createDateElement.textContent=t.createDate,this.checklistElement.innerHTML="";for(let e of t.checklist){let t=document.createElement("li");t.textContent=e.title,this.checklistElement.appendChild(t)}}},s=class{constructor(){this.defaultList=document.querySelector(".projects.default"),this.userList=document.querySelector(".projects.user")}createElement(t,e=[]){let s=document.createElement(t);return e.forEach((t=>{s.classList.add(t)})),s}createTitleElement(t){let e=this.createElement("p",["title"]);return e.textContent=t,e}createTaskCounter(t){let e=this.createElement("p",["taskCount"]);return e.textContent=t,e}createProjectItem(t,e){let s=this.createElement("li");return s.dataset.uid=t,s.appendChild(this.createTitleElement(e.title)),e.todoList.length>0&&s.appendChild(this.createTaskCounter(e.todoList.length)),s}renderProjects(t){this.defaultList.innerHTML="",this.userList.innerHTML="";for(let[e,s]of t){let t=this.createProjectItem(e,s);"default"===s.type?this.defaultList.appendChild(t):this.userList.appendChild(t)}}},i=class{constructor(t){this.sidenav=t,this.sidenavContainer=document.querySelector(".sidenavContainer"),this.addProjectBtn=document.querySelector("#addProject"),this.closeSidenavBtn=document.querySelector("#closeSidenav"),this.openSidenavBtn=document.querySelector("#openSidenav")}loadUI(){this.addProjectBtn.addEventListener("click",(t=>{this.sidenav.mediator.notify(this.sidenav,"newProject",this.sidenav.projectList)})),this.closeSidenavBtn.addEventListener("click",(()=>{this.closeSideNav()})),this.openSidenavBtn.addEventListener("click",(()=>{this.openSideNav()})),window.addEventListener("resize",(()=>{window.innerWidth>=800&&this.sidenavContainer.removeAttribute("style")})),this.sidenavContainer.addEventListener("click",(t=>{let e=t.target.closest("li")?.dataset.uid;e&&(this.sidenav.mediator.notify(this.sidenav,"projectSelected",this.sidenav.projectList.get(e)),this.closeSideNav())}))}openSideNav(){this.sidenavContainer.style.width="240px",this.sidenav.mediator.notify(this.sidenav,"sidenavOpened",null)}closeSideNav(){this.sidenavContainer.removeAttribute("style"),this.sidenav.mediator.notify(this.sidenav,"sidenavClosed",null)}},r=class{constructor(t){this.main=t,this.taskList=document.querySelector(".tasklist"),this.addTaskBtn=document.querySelector(".addTask")}loadUI(){this.addTaskBtn.addEventListener("click",(()=>{this.main.mediator.notify(this.main,"newTask",this.main.currProject)})),this.taskList.addEventListener("click",(t=>{let e=t.target.dataset.uid;e&&this.main.mediator.notify(this.main,"taskSelected",this.main.taskMap.get(e))}))}},o=class{constructor(){this.tasklistContainer=document.querySelector(".tasklist"),this.titleElement=document.querySelector(".projectTitle")}createTaskItem(t,e){let s=document.createElement("li");return s.dataset.uid=t,s.textContent=e,s}renderTasks(t,e){this.tasklistContainer.innerHTML="",this.titleElement.textContent=t.title;for(let[t,s]of e){let e=this.createTaskItem(t,s.title);this.tasklistContainer.appendChild(e)}}},n=class{constructor(t){this.form=t,this.projectModal=document.querySelector(".projectModal"),this.taskModal=document.querySelector(".taskModal"),this.projectForm=document.querySelector(".projectModal form"),this.taskForm=document.querySelector(".taskModal form"),this.closeFormBtns=document.querySelectorAll('button[data-action="closeForm"]')}loadUI(){this.projectForm.addEventListener("submit",(()=>{this.form.formDataHandler.handleData("project"),this.projectForm.reset(),this.form.mediator.notify(this.form,"projectAdded",null)})),this.taskForm.addEventListener("submit",(()=>{this.form.formDataHandler.handleData("task"),this.taskForm.reset(),this.form.mediator.notify(this.form,"taskAdded",null)})),this.closeFormBtns.forEach((t=>{t.addEventListener("click",(t=>{t.target.closest(".modalBox").close()}))}))}showProjectForm(){this.projectModal.showModal()}showTaskForm(){this.taskModal.showModal()}},a=class{constructor(t="",e=[],s="user"){this.title=t,this.todoList=e,this.type=s}addTodo(t){this.todoList.push(t)}removeTodo(t){this.todoList=this.todoList.filter((t=>{}))}};class c{constructor(t="",e=!1){this.title=t,this.isComplete=e}}class d{constructor(t="",e="",s="",i=[],r=!1,o=""){this.title=t,this.dueDate=e,this.priority=s,this.checklist=i,this.isComplete=r,this.note=o,this.createDate=(new Date).toDateString()}addStep(t){this.checklist.push(t)}changeStatus(){this.isComplete=!this.isComplete}changePriority(t){this.priority=t}changeDueDate(t){this.dueDate=t}}const l=new class{constructor(){this.mediator=null,this.currProjectList=null,this.currProject=null,this.currTask=null}getCurrProjectList(){return this.currProjectList}getCurrProject(){return this.currProject}getCurrTask(){return this.currTask}setProjectList(t){this.currProjectList=t}setProject(t){this.currProject=t}setTask(t){this.currTasklist=t}setMediator(t){this.mediator=t}receiveNotification(t,e){"projectsLoaded"==t?this.currProjectList=e:"projectSelected"==t?this.currProject=e:"taskSelected"==t&&(this.currTask=e)}},h=l,u=class{handleData(t){"project"==t?this.createNewProject():"task"==t&&this.createNewTask()}createNewProject(){let t=document.querySelector("#projectTitleInput").value,e=new a(t);h.currProjectList.set(this.getUID(),e)}createNewTask(){let t=document.querySelector("#taskTitleInput").value,e=document.querySelector("#duedateInput").value,s=document.querySelector("#priorityInput").value,i=document.querySelector("#noteInput").value,r=new d(t,e,s,[],!1,i);h.currProject.addTodo(r)}getUID(){return Math.floor(1e9*Math.random()).toString(36)}},m=[new d("Task 1","2023-12-20","High",[new c("Step 1",!1),new c("Step 2",!0)],!1),new d("Task 2","2023-12-21","Medium",[new c("Step 1",!1),new c("Step 2",!0)],!1),new d("Task 3","2023-12-22","Low",[new c("Step 1",!1),new c("Step 2"),!0],!0),new d("Task 4","2023-12-23","High",[new c("Step 1",!1),new c("Step 2"),!0],!1),new d("Task 5","2023-12-24","Medium",[new c("Step 1",!1),new c("Step 2"),!0],!1),new d("Task 6","2023-12-25","Low",[new c("Step 1",!1),new c("Step 2"),!0],!0),new d("Task 7","2023-12-26","High",[new c("Step 1",!1),new c("Step 2"),!0],!1),new d("Task 8","2023-12-27","Medium",[new c("Step 1",!1),new c("Step 2"),!0],!1),new d("Task 9","2023-12-28","Low",[new c("Step 1",!1),new c("Step 2"),!0],!0),new d("Task 10","2023-12-29","High",[new c("Step 1",!1),new c("Step 2"),!0],!1)];let p=[new a("Today",[],"default"),new a("Important",[],"default"),new a("Completed",[],"default"),new a("Tasks",m,"default")];const k=new class{constructor(t){this.ProjectList=new Map,this.init(t)}init(t){t.forEach((t=>{this.ProjectList.set(this.getUID(),t)}))}addProject(t,e){let s=new a(t,e);this.ProjectList.set(this.getUID(),s)}getUID(){return Math.floor(1e9*Math.random()).toString(36)}}(p),w=new class{constructor(){this.components=new Set}register(t){this.components.add(t),t.setMediator(this)}unregister(t){this.components.delete(t),t.setMediator(null)}notify(t,e,s){console.log(e),this.components.forEach((i=>{i!==t&&i.receiveNotification(e,s)}))}},S=new class{constructor(t){this.mediator=null,this.projectList=t,this.sidenavDOM=new s,this.sidenavUI=new i(this)}selectDefaultProject(){this.mediator.notify(this,"projectSelected",this.projectList.values().next().value)}init(){this.sidenavDOM.renderProjects(this.projectList),this.mediator.notify(this,"projectsLoaded",this.projectList),this.sidenavUI.loadUI(),this.selectDefaultProject()}refresh(){this.sidenavDOM.renderProjects(this.projectList),this.mediator.notify(this,"projectsLoaded",this.projectList)}setMediator(t){this.mediator=t}receiveNotification(t,e){"asideOpened"==t&&this.sidenavUI.closeSideNav(),"projectAdded"!=t&&"taskAdded"!=t||this.refresh()}}(k.ProjectList),f=new class{constructor(){this.currTask=null,this.mediator=null,this.asideUI=new t(this),this.asideDOM=new e}init(){this.asideUI.loadUI()}refresh(){this.asideDOM.renderTaskInfo(this.currTask)}showTaskInfo(){this.refresh(),this.asideUI.openAside()}setCurrTask(t){this.currTask=t}setMediator(t){this.mediator=t}receiveNotification(t,e){"taskSelected"==t&&(this.setCurrTask(e),this.showTaskInfo()),"sidenavOpened"!=t&&"projectSelected"!=t||this.asideUI.closeAside()}},j=new class{constructor(){this.currProject=null,this.taskMap=new Map,this.mediator=null,this.mainUI=new r(this),this.mainDOM=new o}init(){this.mainUI.loadUI()}refresh(){this.loadProjectData(),this.mainDOM.renderTasks(this.currProject,this.taskMap)}loadProjectData(){this.taskMap.clear(),this.currProject.todoList.forEach((t=>{this.taskMap.set(this.getUID(),t)}))}getUID(){return Math.floor(1e9*Math.random()).toString(36)}setMediator(t){this.mediator=t}receiveNotification(t,e){"projectSelected"==t&&(this.currProject=e,this.refresh()),"taskAdded"==t&&this.refresh()}},v=new class{constructor(){this.formUI=new n(this),this.formDataHandler=new u,this.mediator=null}init(){this.formUI.loadUI()}setMediator(t){this.mediator=t}receiveNotification(t,e){"newProject"==t&&this.formUI.showProjectForm(),"newTask"==t&&this.formUI.showTaskForm()}};w.register(S),w.register(j),w.register(f),w.register(v),w.register(h),S.init(),j.init(),f.init(),v.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,