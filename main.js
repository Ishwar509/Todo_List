(()=>{"use strict";const t=class{constructor(t){this.aside=t,this.closeAsideBtn=document.querySelector(".closeAside"),this.asideContainer=document.querySelector(".asideContainer")}loadUI(){this.closeAsideBtn.addEventListener("click",(()=>{this.closeAside()}))}closeAside(){this.asideContainer.style.width="0px",this.aside.mediator.notify(this.aside,"asideClosed",null)}openAside(){this.aside.mediator.notify(this.aside,"asideOpened",null),this.asideContainer.style.width="240px"}},e=class{constructor(){this.taskTitleElement=document.querySelector(".taskTitle"),this.checklistElement=document.querySelector(".checklist"),this.dueDateElement=document.querySelector(".duedate"),this.noteElement=document.querySelector(".note"),this.createDateElement=document.querySelector(".createDate"),this.priorityElement=document.querySelector(".priority")}renderTaskInfo(t){this.taskTitleElement.textContent=t.title,this.dueDateElement.textContent=t.dueDate,this.noteElement.textContent=t.note,this.priorityElement.textContent=t.priority,this.createDateElement.textContent=t.createDate,this.checklistElement.innerHTML="";for(let e of t.checklist){let t=document.createElement("li");t.textContent=e.title,this.checklistElement.appendChild(t)}}},i=class{constructor(){this.defaultList=document.querySelector(".projects.default"),this.userList=document.querySelector(".projects.user")}createElement(t,e=[]){let i=document.createElement(t);return e.forEach((t=>{i.classList.add(t)})),i}createTitleElement(t){let e=this.createElement("p",["title"]);return e.textContent=t,e}createTaskCounter(t){let e=this.createElement("p",["taskCount"]);return e.textContent=t,e}createProjectItem(t,e){let i=this.createElement("li");return i.dataset.uid=t,i.appendChild(this.createTitleElement(e.title)),e.todoList.length>0&&i.appendChild(this.createTaskCounter(e.todoList.length)),i}renderProjects(t){this.defaultList.innerHTML="",this.userList.innerHTML="";for(let[e,i]of t){let t=this.createProjectItem(e,i);"default"===i.type?this.defaultList.appendChild(t):this.userList.appendChild(t)}}},s=class{constructor(t){this.sidenav=t,this.sidenavContainer=document.querySelector(".sidenavContainer"),this.addProjectBtn=document.querySelector("#addProject"),this.closeSidenavBtn=document.querySelector("#closeSidenav"),this.openSidenavBtn=document.querySelector("#openSidenav")}loadUI(){this.addProjectBtn.addEventListener("click",(t=>{this.sidenav.mediator.notify(this.sidenav,"newProject",null)})),this.closeSidenavBtn.addEventListener("click",(()=>{this.closeSideNav()})),this.openSidenavBtn.addEventListener("click",(()=>{this.openSideNav()})),window.addEventListener("resize",(()=>{window.innerWidth>=800&&this.sidenavContainer.removeAttribute("style")})),this.sidenavContainer.addEventListener("click",(t=>{let e=t.target.dataset.uid;e&&this.sidenav.mediator.notify(this.sidenav,"projectSelected",this.sidenav.projectList.get(e))}))}openSideNav(){this.sidenavContainer.style.width="240px",this.sidenav.mediator.notify(this.sidenav,"sidenavOpened",null)}closeSideNav(){this.sidenavContainer.removeAttribute("style"),this.sidenav.mediator.notify(this.sidenav,"sidenavClosed",null)}},n=class{constructor(t){this.main=t,this.taskList=document.querySelector(".tasklist"),this.addTaskBtn=document.querySelector(".addTask")}loadUI(){this.addTaskBtn.addEventListener("click",(()=>{this.main.mediator.notify(this.main,"newTask",null)})),this.taskList.addEventListener("click",(t=>{let e=t.target.dataset.uid;e&&this.main.mediator.notify(this.main,"taskSelected",this.main.taskMap.get(e))}))}},r=class{constructor(){this.tasklistContainer=document.querySelector(".tasklist"),this.titleElement=document.querySelector(".projectTitle")}createTaskItem(t,e){let i=document.createElement("li");return i.dataset.uid=t,i.textContent=e,i}renderTasks(t,e){this.tasklistContainer.innerHTML="",this.titleElement.textContent=t.title;for(let[t,i]of e){let e=this.createTaskItem(t,i.title);this.tasklistContainer.appendChild(e)}}},a=class{constructor(t="",e=[],i="user"){this.title=t,this.todoList=e,this.type=i}addTodo(t){this.todoList.push(t)}removeTodo(t){this.todoList=this.todoList.filter((t=>{}))}};class o{constructor(t="",e=!1){this.title=t,this.isComplete=e}}class d{constructor(t="",e="",i="",s=[],n=!1,r=""){this.title=t,this.dueDate=e,this.priority=i,this.checklist=s,this.isComplete=n,this.note=r,this.createDate=(new Date).toDateString()}addStep(t){this.checklist.push(t)}changeStatus(){this.isComplete=!this.isComplete}changePriority(t){this.priority=t}changeDueDate(t){this.dueDate=t}}const c=[new d("Task 1","2023-12-20","High",[new o("Step 1",!1),new o("Step 2",!0)],!1),new d("Task 2","2023-12-21","Medium",[new o("Step 1",!1),new o("Step 2",!0)],!1),new d("Task 3","2023-12-22","Low",[new o("Step 1",!1),new o("Step 2"),!0],!0),new d("Task 4","2023-12-23","High",[new o("Step 1",!1),new o("Step 2"),!0],!1),new d("Task 5","2023-12-24","Medium",[new o("Step 1",!1),new o("Step 2"),!0],!1),new d("Task 6","2023-12-25","Low",[new o("Step 1",!1),new o("Step 2"),!0],!0),new d("Task 7","2023-12-26","High",[new o("Step 1",!1),new o("Step 2"),!0],!1),new d("Task 8","2023-12-27","Medium",[new o("Step 1",!1),new o("Step 2"),!0],!1),new d("Task 9","2023-12-28","Low",[new o("Step 1",!1),new o("Step 2"),!0],!0),new d("Task 10","2023-12-29","High",[new o("Step 1",!1),new o("Step 2"),!0],!1)];let l=[new a("Today",[],"default"),new a("Important",[],"default"),new a("Completed",[],"default"),new a("Tasks",c,"default")];const h=new class{constructor(t){this.ProjectList=new Map,this.init(t)}init(t){t.forEach((t=>{this.ProjectList.set(this.getUID(),t)}))}addProject(t,e){let i=new a(t,e);this.ProjectList.set(this.getUID(),i)}getUID(){return Math.floor(1e9*Math.random()).toString(36)}}(l),u=new class{constructor(){this.components=new Set}register(t){this.components.add(t),t.setMediator(this)}unregister(t){this.components.delete(t),t.setMediator(null)}notify(t,e,i){console.log({sender:t,eventType:e,data:i}),this.components.forEach((s=>{s!==t&&s.receiveNotification(e,i)}))}},m=new class{constructor(t){this.mediator=null,this.projectList=t,this.sidenavDOM=new i,this.sidenavUI=new s(this)}selectDefaultProject(){this.mediator.notify(this,"projectSelected",this.projectList.values().next().value)}init(){this.sidenavDOM.renderProjects(this.projectList),this.sidenavUI.loadUI(),this.selectDefaultProject()}refresh(){this.sidenavDOM.renderProjects(this.projectList)}setMediator(t){this.mediator=t}receiveNotification(t,e){}}(h.ProjectList),p=new class{constructor(){this.currTask=null,this.mediator=null,this.asideUI=new t(this),this.asideDOM=new e}init(){this.asideUI.loadUI()}refresh(){this.asideDOM.renderTaskInfo(this.currTask)}showTaskInfo(){this.refresh(),this.asideUI.openAside()}setCurrTask(t){this.currTask=t}setMediator(t){this.mediator=t}receiveNotification(t,e){"taskSelected"==t&&(this.setCurrTask(e),this.showTaskInfo())}},w=new class{constructor(){this.currProject=null,this.taskMap=new Map,this.mediator=null,this.mainUI=new n(this),this.mainDOM=new r}init(){this.mainUI.loadUI()}refresh(){this.mainDOM.renderTasks(this.currProject,this.taskMap)}loadProjectData(t){this.currProject=t,this.taskMap.clear(),this.currProject.todoList.forEach((t=>{this.taskMap.set(this.getUID(),t)}))}getUID(){return Math.floor(1e9*Math.random()).toString(36)}setMediator(t){this.mediator=t}receiveNotification(t,e){"projectSelected"==t&&(this.loadProjectData(e),this.refresh())}};u.register(m),u.register(w),u.register(p),m.init(),w.init(),p.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dkcsS0FBS3dHLFNBQVV0QixFQUFLLEdBRTdDLENBRUEsTUFBQXNCLEdBRUksT0FEZ0JFLEtBQUtDLE1BQXNCLElBQWhCRCxLQUFLRSxVQUNmQyxTQUFTLEdBQzlCLENBRUEsV0FBQUssQ0FBWXhHLEdBQ1JWLEtBQUtVLFNBQVdBLENBQ3BCLENBRUEsbUJBQUFnSCxDQUFvQkosRUFBV0MsR0FDWCxtQkFBYkQsSUFDQ3RILEtBQUt5SSxnQkFBZ0JsQixHQUNyQnZILEtBQUtnSSxVQUViLEdKckJKLEVBQVNoQixTQUFTLEdBQ2xCLEVBQVNBLFNBQVMsR0FDbEIsRUFBU0EsU0FBUyxHQUVsQixFQUFRVixPQUNSLEVBQUtBLE9BQ0wsRUFBTUEsTSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG9fbGlzdC8uL3NyYy9tb2R1bGVzL0FzaWRlL2FzaWRlVUkuanMiLCJ3ZWJwYWNrOi8vdG9kb19saXN0Ly4vc3JjL21vZHVsZXMvQXNpZGUvYXNpZGVET00uanMiLCJ3ZWJwYWNrOi8vdG9kb19saXN0Ly4vc3JjL21vZHVsZXMvU2lkZW5hdi9zaWRlbmF2RE9NLmpzIiwid2VicGFjazovL3RvZG9fbGlzdC8uL3NyYy9tb2R1bGVzL1NpZGVuYXYvc2lkZW5hdlVJLmpzIiwid2VicGFjazovL3RvZG9fbGlzdC8uL3NyYy9tb2R1bGVzL01haW4vbWFpblVJLmpzIiwid2VicGFjazovL3RvZG9fbGlzdC8uL3NyYy9tb2R1bGVzL01haW4vbWFpbkRPTS5qcyIsIndlYnBhY2s6Ly90b2RvX2xpc3QvLi9zcmMvbW9kdWxlcy9mYWN0b3JpZXMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvX2xpc3QvLi9zcmMvbW9kdWxlcy9mYWN0b3JpZXMvdG9kby5qcyIsIndlYnBhY2s6Ly90b2RvX2xpc3QvLi9zcmMvbW9kdWxlcy9kYXRhTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90b2RvX2xpc3QvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb19saXN0Ly4vc3JjL21vZHVsZXMvbWVkaWF0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kb19saXN0Ly4vc3JjL21vZHVsZXMvU2lkZW5hdi9zaWRlbmF2LmpzIiwid2VicGFjazovL3RvZG9fbGlzdC8uL3NyYy9tb2R1bGVzL0FzaWRlL2FzaWRlLmpzIiwid2VicGFjazovL3RvZG9fbGlzdC8uL3NyYy9tb2R1bGVzL01haW4vbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNsYXNzIEFzaWRlVUkge1xuICAgIGNvbnN0cnVjdG9yKGFzaWRlKXtcbiAgICAgICAgdGhpcy5hc2lkZSA9IGFzaWRlO1xuICAgICAgICB0aGlzLmNsb3NlQXNpZGVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvc2VBc2lkZScpO1xuICAgICAgICB0aGlzLmFzaWRlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFzaWRlQ29udGFpbmVyJyk7XG4gICAgfVxuXG4gICAgbG9hZFVJKCl7XG4gICAgICAgIHRoaXMuY2xvc2VBc2lkZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBc2lkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjbG9zZUFzaWRlKCl7XG4gICAgICAgIHRoaXMuYXNpZGVDb250YWluZXIuc3R5bGUud2lkdGggPSAnMHB4JztcbiAgICAgICAgdGhpcy5hc2lkZS5tZWRpYXRvci5ub3RpZnkodGhpcy5hc2lkZSwgJ2FzaWRlQ2xvc2VkJywgbnVsbCk7XG4gICAgfVxuXG4gICAgb3BlbkFzaWRlKCl7XG4gICAgICAgIHRoaXMuYXNpZGUubWVkaWF0b3Iubm90aWZ5KHRoaXMuYXNpZGUsICdhc2lkZU9wZW5lZCcsIG51bGwpO1xuICAgICAgICB0aGlzLmFzaWRlQ29udGFpbmVyLnN0eWxlLndpZHRoID0gJzI0MHB4JztcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBc2lkZVVJOyIsIlxuY2xhc3MgQXNpZGVET00ge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMudGFza1RpdGxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrVGl0bGUnKTtcbiAgICAgICAgdGhpcy5jaGVja2xpc3RFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoZWNrbGlzdCcpO1xuICAgICAgICB0aGlzLmR1ZURhdGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmR1ZWRhdGUnKTtcbiAgICAgICAgdGhpcy5ub3RlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3RlJyk7XG4gICAgICAgIHRoaXMuY3JlYXRlRGF0ZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY3JlYXRlRGF0ZScpO1xuICAgICAgICB0aGlzLnByaW9yaXR5RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcmlvcml0eScpO1xuICAgIH1cblxuICAgIHJlbmRlclRhc2tJbmZvKHRhc2spe1xuICAgICAgICB0aGlzLnRhc2tUaXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrLnRpdGxlO1xuICAgICAgICB0aGlzLmR1ZURhdGVFbGVtZW50LnRleHRDb250ZW50ID0gdGFzay5kdWVEYXRlO1xuICAgICAgICB0aGlzLm5vdGVFbGVtZW50LnRleHRDb250ZW50ID0gdGFzay5ub3RlO1xuICAgICAgICB0aGlzLnByaW9yaXR5RWxlbWVudC50ZXh0Q29udGVudCA9IHRhc2sucHJpb3JpdHk7XG4gICAgICAgIHRoaXMuY3JlYXRlRGF0ZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0YXNrLmNyZWF0ZURhdGU7XG5cbiAgICAgICAgdGhpcy5jaGVja2xpc3RFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IHN0ZXAgb2YgdGFzay5jaGVja2xpc3Qpe1xuICAgICAgICAgICAgbGV0IGxpc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgIGxpc3RFbGVtZW50LnRleHRDb250ZW50ID0gc3RlcC50aXRsZTtcblxuICAgICAgICAgICAgdGhpcy5jaGVja2xpc3RFbGVtZW50LmFwcGVuZENoaWxkKGxpc3RFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFzaWRlRE9NOyIsIlxuXG5jbGFzcyBTaWRlbmF2RE9NIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmRlZmF1bHRMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzLmRlZmF1bHQnKTtcbiAgICAgICAgdGhpcy51c2VyTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0cy51c2VyJyk7XG4gICAgfVxuXG4gICAgY3JlYXRlRWxlbWVudCh0eXBlLCBjbGFzc0xpc3QgPSBbXSl7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcbiAgICAgICAgXG4gICAgICAgIGNsYXNzTGlzdC5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGNyZWF0ZVRpdGxlRWxlbWVudCh0aXRsZSl7XG4gICAgICAgIGxldCB0aXRsZUVsZW1lbnQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ3AnLCBbJ3RpdGxlJ10pO1xuICAgICAgICB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0aXRsZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aXRsZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY3JlYXRlVGFza0NvdW50ZXIoY291bnQpe1xuICAgICAgICBsZXQgdGFza0NvdW50ZXJFbGVtZW50ID0gdGhpcy5jcmVhdGVFbGVtZW50KCdwJywgWyd0YXNrQ291bnQnXSk7XG4gICAgICAgIHRhc2tDb3VudGVyRWxlbWVudC50ZXh0Q29udGVudCA9IGNvdW50O1xuXG4gICAgICAgIHJldHVybiB0YXNrQ291bnRlckVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY3JlYXRlUHJvamVjdEl0ZW0ocHJvamVjdElkLCBwcm9qZWN0KXtcbiAgICAgICAgbGV0IHByb2plY3RJdGVtID0gdGhpcy5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICBwcm9qZWN0SXRlbS5kYXRhc2V0LnVpZCA9IHByb2plY3RJZDtcblxuICAgICAgICBwcm9qZWN0SXRlbS5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVRpdGxlRWxlbWVudChwcm9qZWN0LnRpdGxlKSk7XG5cbiAgICAgICAgaWYocHJvamVjdC50b2RvTGlzdC5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHByb2plY3RJdGVtLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlVGFza0NvdW50ZXIocHJvamVjdC50b2RvTGlzdC5sZW5ndGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwcm9qZWN0SXRlbTtcbiAgICB9XG5cbiAgICByZW5kZXJQcm9qZWN0cyhsaXN0KXtcbiAgICAgICAgdGhpcy5kZWZhdWx0TGlzdC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICB0aGlzLnVzZXJMaXN0LmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIFxuICAgICAgICBmb3IobGV0IFt1aWQsIHByb2plY3RdIG9mIGxpc3Qpe1xuICAgICAgICAgICAgbGV0IHByb2plY3RJdGVtID0gdGhpcy5jcmVhdGVQcm9qZWN0SXRlbSh1aWQsIHByb2plY3QpO1xuXG4gICAgICAgICAgICBpZihwcm9qZWN0LnR5cGUgPT09ICdkZWZhdWx0Jyl7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0TGlzdC5hcHBlbmRDaGlsZChwcm9qZWN0SXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHRoaXMudXNlckxpc3QuYXBwZW5kQ2hpbGQocHJvamVjdEl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZW5hdkRPTTsiLCJcblxuY2xhc3MgU2lkZW5hdlVJIHtcbiAgICBjb25zdHJ1Y3RvciAoc2lkZW5hdil7XG4gICAgICAgIHRoaXMuc2lkZW5hdiA9IHNpZGVuYXY7XG4gICAgICAgIHRoaXMuc2lkZW5hdkNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlbmF2Q29udGFpbmVyJyk7XG4gICAgICAgIHRoaXMuYWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGRQcm9qZWN0Jyk7XG4gICAgICAgIHRoaXMuY2xvc2VTaWRlbmF2QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Nsb3NlU2lkZW5hdicpO1xuICAgICAgICB0aGlzLm9wZW5TaWRlbmF2QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI29wZW5TaWRlbmF2Jyk7XG4gICAgfVxuXG4gICAgbG9hZFVJKCl7XG4gICAgICAgIHRoaXMuYWRkUHJvamVjdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKT0+e1xuICAgICAgICAgICAgdGhpcy5zaWRlbmF2Lm1lZGlhdG9yLm5vdGlmeSh0aGlzLnNpZGVuYXYsICduZXdQcm9qZWN0JywgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jbG9zZVNpZGVuYXZCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlU2lkZU5hdigpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMub3BlblNpZGVuYXZCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9wZW5TaWRlTmF2KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoID49IDgwMCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zaWRlbmF2Q29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIHRoaXMuc2lkZW5hdkNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdWlkID0gZS50YXJnZXQuZGF0YXNldC51aWQ7XG4gICAgICAgICAgICBpZighdWlkKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICB0aGlzLnNpZGVuYXYubWVkaWF0b3Iubm90aWZ5KHRoaXMuc2lkZW5hdiwgJ3Byb2plY3RTZWxlY3RlZCcsIHRoaXMuc2lkZW5hdi5wcm9qZWN0TGlzdC5nZXQodWlkKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9wZW5TaWRlTmF2KCl7XG4gICAgICAgIHRoaXMuc2lkZW5hdkNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcyNDBweCc7XG4gICAgICAgIHRoaXMuc2lkZW5hdi5tZWRpYXRvci5ub3RpZnkodGhpcy5zaWRlbmF2LCAnc2lkZW5hdk9wZW5lZCcsIG51bGwpO1xuICAgIH1cblxuICAgIGNsb3NlU2lkZU5hdigpe1xuICAgICAgICB0aGlzLnNpZGVuYXZDb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICB0aGlzLnNpZGVuYXYubWVkaWF0b3Iubm90aWZ5KHRoaXMuc2lkZW5hdiwgJ3NpZGVuYXZDbG9zZWQnLCBudWxsKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTaWRlbmF2VUk7IiwiXG5cbmNsYXNzIE1haW5VSSB7XG4gICAgY29uc3RydWN0b3IobWFpbil7XG4gICAgICAgIHRoaXMubWFpbiA9IG1haW47XG4gICAgICAgIHRoaXMudGFza0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza2xpc3QnKTtcbiAgICAgICAgdGhpcy5hZGRUYXNrQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZFRhc2snKTtcbiAgICB9XG5cbiAgICBsb2FkVUkoKXtcbiAgICAgICAgdGhpcy5hZGRUYXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgIHRoaXMubWFpbi5tZWRpYXRvci5ub3RpZnkodGhpcy5tYWluLCAnbmV3VGFzaycsIG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRhc2tMaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgIGxldCB1aWQgPSBlLnRhcmdldC5kYXRhc2V0LnVpZDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYoIXVpZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICB0aGlzLm1haW4ubWVkaWF0b3Iubm90aWZ5KHRoaXMubWFpbiwgJ3Rhc2tTZWxlY3RlZCcsIHRoaXMubWFpbi50YXNrTWFwLmdldCh1aWQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNYWluVUk7IiwiXG5cbmNsYXNzIE1haW5ET00ge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMudGFza2xpc3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza2xpc3QnKTtcbiAgICAgICAgdGhpcy50aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdFRpdGxlJyk7XG4gICAgfVxuXG4gICAgY3JlYXRlVGFza0l0ZW0odGFza0lkLCB0YXNrTmFtZSl7XG4gICAgICAgIGxldCB0YXNrSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgIHRhc2tJdGVtLmRhdGFzZXQudWlkID0gdGFza0lkO1xuXG4gICAgICAgIHRhc2tJdGVtLnRleHRDb250ZW50ID0gdGFza05hbWU7XG5cbiAgICAgICAgcmV0dXJuIHRhc2tJdGVtO1xuICAgIH1cblxuXG4gICAgcmVuZGVyVGFza3MocHJvamVjdCwgdGFza2xpc3Qpe1xuICAgICAgICB0aGlzLnRhc2tsaXN0Q29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICAgICAgdGhpcy50aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBwcm9qZWN0LnRpdGxlO1xuICAgICAgICBcbiAgICAgICAgZm9yKGxldCBbdWlkLCB0YXNrXSBvZiB0YXNrbGlzdCl7XG4gICAgICAgICAgICBsZXQgdGFza0l0ZW0gPSB0aGlzLmNyZWF0ZVRhc2tJdGVtKHVpZCwgdGFzay50aXRsZSk7XG5cbiAgICAgICAgICAgIHRoaXMudGFza2xpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodGFza0l0ZW0pO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYWluRE9NOyIsIlxuY2xhc3MgUHJvamVjdCB7XG4gICAgY29uc3RydWN0b3IodGl0bGUgPSAnJywgdG9kb0xpc3QgPSBbXSwgdHlwZSA9ICd1c2VyJyl7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy50b2RvTGlzdCA9IHRvZG9MaXN0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cblxuICAgIGFkZFRvZG8odG9kbyl7XG4gICAgICAgIHRoaXMudG9kb0xpc3QucHVzaCh0b2RvKTtcbiAgICB9XG5cbiAgICByZW1vdmVUb2RvKHRvZG8pe1xuICAgICAgICB0aGlzLnRvZG9MaXN0ID0gIHRoaXMudG9kb0xpc3QuZmlsdGVyKChjdXJyKSA9PiB7Y3VyciAhPT0gdG9kb30pO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2plY3Q7IiwiXG5jbGFzcyBTdGVwe1xuICAgIGNvbnN0cnVjdG9yKHRpdGxlID0gJycsIGlzQ29tcGxldGUgPSBmYWxzZSl7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gaXNDb21wbGV0ZTtcbiAgICB9XG59O1xuXG5jbGFzcyBUb2RvIHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSA9ICcnLCBkdWVEYXRlID0gJycsIHByaW9yaXR5ID0gJycsIGNoZWNrbGlzdCA9IFtdLCBpc0NvbXBsZXRlID0gZmFsc2UsIG5vdGUgPSAnJyl7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICB0aGlzLmNoZWNrbGlzdCA9IGNoZWNrbGlzdDtcbiAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gaXNDb21wbGV0ZTtcbiAgICAgICAgdGhpcy5ub3RlID0gbm90ZTtcbiAgICAgICAgdGhpcy5jcmVhdGVEYXRlID0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTtcbiAgICB9XG5cbiAgICBhZGRTdGVwKHN0ZXApe1xuICAgICAgICB0aGlzLmNoZWNrbGlzdC5wdXNoKHN0ZXApO1xuICAgIH1cblxuICAgIGNoYW5nZVN0YXR1cygpe1xuICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSAhdGhpcy5pc0NvbXBsZXRlO1xuICAgIH1cblxuICAgIGNoYW5nZVByaW9yaXR5KHByaW9yaXR5KXtcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIH1cblxuICAgIGNoYW5nZUR1ZURhdGUoZGF0ZSl7XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGRhdGU7XG4gICAgfVxufTtcblxuZXhwb3J0IHtTdGVwLCBUb2RvfTsiLCJpbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9mYWN0b3JpZXMvcHJvamVjdC5qc1wiO1xuaW1wb3J0IHsgU3RlcCwgVG9kbyB9IGZyb20gXCIuL2ZhY3Rvcmllcy90b2RvLmpzXCI7XG5cblxuY2xhc3MgRGF0YU1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKHByb2plY3RzKXtcbiAgICAgICAgdGhpcy5Qcm9qZWN0TGlzdCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5pbml0KHByb2plY3RzKTtcbiAgICB9XG5cbiAgICBpbml0KHByb2plY3RzKXtcbiAgICAgICAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuUHJvamVjdExpc3Quc2V0KHRoaXMuZ2V0VUlEKCksIHByb2plY3QpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRQcm9qZWN0KHRpdGxlLCB0b2RvTGlzdCl7XG4gICAgICAgIGxldCBwcm9qZWN0ID0gbmV3IFByb2plY3QodGl0bGUsIHRvZG9MaXN0KTtcbiAgICAgICAgdGhpcy5Qcm9qZWN0TGlzdC5zZXQodGhpcy5nZXRVSUQoKSwgcHJvamVjdCk7XG4gICAgfVxuXG4gICAgZ2V0VUlEKCl7XG4gICAgICAgIGxldCByYW5kb21OdW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxZTkpO1xuICAgICAgICByZXR1cm4gcmFuZG9tTnVtLnRvU3RyaW5nKDM2KTtcbiAgICB9XG59O1xuXG5cbmNvbnN0IHRvZG9BcnJheSA9IFtcbiAgICBuZXcgVG9kbyhcIlRhc2sgMVwiLCBcIjIwMjMtMTItMjBcIiwgXCJIaWdoXCIsIFtuZXcgU3RlcChcIlN0ZXAgMVwiLCBmYWxzZSksIG5ldyBTdGVwKFwiU3RlcCAyXCIsIHRydWUpXSwgZmFsc2UpLFxuICAgIG5ldyBUb2RvKFwiVGFzayAyXCIsIFwiMjAyMy0xMi0yMVwiLCBcIk1lZGl1bVwiLCBbbmV3IFN0ZXAoXCJTdGVwIDFcIiwgZmFsc2UpLCBuZXcgU3RlcChcIlN0ZXAgMlwiLCB0cnVlKV0sIGZhbHNlKSxcbiAgICBuZXcgVG9kbyhcIlRhc2sgM1wiLCBcIjIwMjMtMTItMjJcIiwgXCJMb3dcIiwgW25ldyBTdGVwKFwiU3RlcCAxXCIsIGZhbHNlKSwgbmV3IFN0ZXAoXCJTdGVwIDJcIiksIHRydWVdLCB0cnVlKSxcbiAgICBuZXcgVG9kbyhcIlRhc2sgNFwiLCBcIjIwMjMtMTItMjNcIiwgXCJIaWdoXCIsIFtuZXcgU3RlcChcIlN0ZXAgMVwiLCBmYWxzZSksIG5ldyBTdGVwKFwiU3RlcCAyXCIpLCB0cnVlXSwgZmFsc2UpLFxuICAgIG5ldyBUb2RvKFwiVGFzayA1XCIsIFwiMjAyMy0xMi0yNFwiLCBcIk1lZGl1bVwiLCBbbmV3IFN0ZXAoXCJTdGVwIDFcIiwgZmFsc2UpLCBuZXcgU3RlcChcIlN0ZXAgMlwiKSwgdHJ1ZV0sIGZhbHNlKSxcbiAgICBuZXcgVG9kbyhcIlRhc2sgNlwiLCBcIjIwMjMtMTItMjVcIiwgXCJMb3dcIiwgW25ldyBTdGVwKFwiU3RlcCAxXCIsIGZhbHNlKSwgbmV3IFN0ZXAoXCJTdGVwIDJcIiksIHRydWVdLCB0cnVlKSxcbiAgICBuZXcgVG9kbyhcIlRhc2sgN1wiLCBcIjIwMjMtMTItMjZcIiwgXCJIaWdoXCIsIFtuZXcgU3RlcChcIlN0ZXAgMVwiLCBmYWxzZSksIG5ldyBTdGVwKFwiU3RlcCAyXCIpLCB0cnVlXSwgZmFsc2UpLFxuICAgIG5ldyBUb2RvKFwiVGFzayA4XCIsIFwiMjAyMy0xMi0yN1wiLCBcIk1lZGl1bVwiLCBbbmV3IFN0ZXAoXCJTdGVwIDFcIiwgZmFsc2UpLCBuZXcgU3RlcChcIlN0ZXAgMlwiKSwgdHJ1ZV0sIGZhbHNlKSxcbiAgICBuZXcgVG9kbyhcIlRhc2sgOVwiLCBcIjIwMjMtMTItMjhcIiwgXCJMb3dcIiwgW25ldyBTdGVwKFwiU3RlcCAxXCIsIGZhbHNlKSwgbmV3IFN0ZXAoXCJTdGVwIDJcIiksIHRydWVdLCB0cnVlKSxcbiAgICBuZXcgVG9kbyhcIlRhc2sgMTBcIiwgXCIyMDIzLTEyLTI5XCIsIFwiSGlnaFwiLCBbbmV3IFN0ZXAoXCJTdGVwIDFcIiwgZmFsc2UpLCBuZXcgU3RlcChcIlN0ZXAgMlwiKSwgdHJ1ZV0sIGZhbHNlKVxuXTtcblxuXG5sZXQgZGVmYXVsdFByb2plY3RzID0gW25ldyBQcm9qZWN0KCdUb2RheScsIFtdLCAnZGVmYXVsdCcpLCBuZXcgUHJvamVjdCgnSW1wb3J0YW50JywgW10sICdkZWZhdWx0JyksIFxuICAgICAgICAgICAgICAgICAgICBuZXcgUHJvamVjdCgnQ29tcGxldGVkJywgW10sICdkZWZhdWx0JyksIG5ldyBQcm9qZWN0KCdUYXNrcycsIHRvZG9BcnJheSwgJ2RlZmF1bHQnKV07XG5cblxuY29uc3QgZGF0YU1hbmFnZXIgPSBuZXcgRGF0YU1hbmFnZXIoZGVmYXVsdFByb2plY3RzKTtcblxuZXhwb3J0IGRlZmF1bHQgZGF0YU1hbmFnZXI7IiwiLy8gaW1wb3J0IHsgbG9hZFNpZGVuYXZVSX0gZnJvbSBcIi4vbW9kdWxlcy9zaWRlbmF2Q29udHJvbGxlci5qc1wiO1xuLy8gaW1wb3J0IHsgbG9hZEFzaWRlVUkgfSBmcm9tIFwiLi9tb2R1bGVzL2FzaWRlQ29udHJvbGxlci5qc1wiO1xuLy8gaW1wb3J0IHsgbG9hZE1haW5VSSB9IGZyb20gXCIuL21vZHVsZXMvbWFpbkNvbnRyb2xsZXIuanNcIjtcbi8vIGltcG9ydCB7IGxvYWRNb2RhbFVJIH0gZnJvbSBcIi4vbW9kdWxlcy9tb2RhbEJveC5qc1wiO1xuLy8gaW1wb3J0IHsgbG9hZEZvcm1VSSB9IGZyb20gXCIuL21vZHVsZXMvZm9ybS5qc1wiO1xuXG4vLyBsb2FkU2lkZW5hdlVJKCk7XG4vLyBsb2FkQXNpZGVVSSgpO1xuLy8gbG9hZE1haW5VSSgpO1xuLy8gbG9hZE1vZGFsVUkoKTtcbi8vIGxvYWRGb3JtVUkoKTtcblxuXG5pbXBvcnQgQXNpZGUgZnJvbSBcIi4vbW9kdWxlcy9Bc2lkZS9hc2lkZS5qc1wiO1xuaW1wb3J0IFNpZGVuYXYgZnJvbSBcIi4vbW9kdWxlcy9TaWRlbmF2L3NpZGVuYXYuanNcIjtcbmltcG9ydCBNYWluIGZyb20gXCIuL21vZHVsZXMvTWFpbi9tYWluLmpzXCI7XG5pbXBvcnQgTWVkaWF0b3IgZnJvbSBcIi4vbW9kdWxlcy9tZWRpYXRvci5qc1wiO1xuaW1wb3J0IGRhdGFNYW5hZ2VyIGZyb20gXCIuL21vZHVsZXMvZGF0YU1hbmFnZXIuanNcIjtcblxuY29uc3QgbWVkaWF0b3IgPSBuZXcgTWVkaWF0b3IoKTtcbmNvbnN0IHNpZGVuYXYgPSBuZXcgU2lkZW5hdihkYXRhTWFuYWdlci5Qcm9qZWN0TGlzdCk7XG5jb25zdCBhc2lkZSA9IG5ldyBBc2lkZSgpO1xuY29uc3QgbWFpbiA9IG5ldyBNYWluKCk7XG5cbm1lZGlhdG9yLnJlZ2lzdGVyKHNpZGVuYXYpO1xubWVkaWF0b3IucmVnaXN0ZXIobWFpbik7XG5tZWRpYXRvci5yZWdpc3Rlcihhc2lkZSk7XG5cbnNpZGVuYXYuaW5pdCgpO1xubWFpbi5pbml0KCk7XG5hc2lkZS5pbml0KCk7XG5cbiIsImNsYXNzIE1lZGlhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBuZXcgU2V0KCk7XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIoY29tcG9uZW50KXtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzLmFkZChjb21wb25lbnQpO1xuICAgICAgICBjb21wb25lbnQuc2V0TWVkaWF0b3IodGhpcyk7XG4gICAgfVxuXG4gICAgdW5yZWdpc3Rlcihjb21wb25lbnQpe1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMuZGVsZXRlKGNvbXBvbmVudCk7XG4gICAgICAgIGNvbXBvbmVudC5zZXRNZWRpYXRvcihudWxsKTtcbiAgICB9XG5cbiAgICBub3RpZnkoc2VuZGVyLCBldmVudFR5cGUsIGRhdGEpe1xuICAgICAgICBjb25zb2xlLmxvZyh7c2VuZGVyLCBldmVudFR5cGUsIGRhdGF9KTtcblxuICAgICAgICB0aGlzLmNvbXBvbmVudHMuZm9yRWFjaCgoY29tcG9uZW50KSA9PiB7XG4gICAgICAgICAgICBpZihjb21wb25lbnQgIT09IHNlbmRlcil7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LnJlY2VpdmVOb3RpZmljYXRpb24oZXZlbnRUeXBlLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVkaWF0b3I7IiwiaW1wb3J0IFNpZGVuYXZET00gZnJvbSBcIi4vc2lkZW5hdkRPTS5qc1wiO1xuaW1wb3J0IFNpZGVuYXZVSSBmcm9tIFwiLi9zaWRlbmF2VUkuanNcIjtcblxuY2xhc3MgU2lkZW5hdiB7XG4gICAgY29uc3RydWN0b3IocHJvamVjdExpc3Qpe1xuICAgICAgICB0aGlzLm1lZGlhdG9yID0gbnVsbDtcblxuICAgICAgICB0aGlzLnByb2plY3RMaXN0ID0gcHJvamVjdExpc3Q7XG4gICAgICAgIHRoaXMuc2lkZW5hdkRPTSA9IG5ldyBTaWRlbmF2RE9NKCk7XG4gICAgICAgIHRoaXMuc2lkZW5hdlVJID0gbmV3IFNpZGVuYXZVSSh0aGlzKTtcbiAgICB9XG5cbiAgICBzZWxlY3REZWZhdWx0UHJvamVjdCgpe1xuICAgICAgICB0aGlzLm1lZGlhdG9yLm5vdGlmeSh0aGlzLCAncHJvamVjdFNlbGVjdGVkJywgdGhpcy5wcm9qZWN0TGlzdC52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5zaWRlbmF2RE9NLnJlbmRlclByb2plY3RzKHRoaXMucHJvamVjdExpc3QpO1xuICAgICAgICB0aGlzLnNpZGVuYXZVSS5sb2FkVUkoKTtcbiAgICAgICAgdGhpcy5zZWxlY3REZWZhdWx0UHJvamVjdCgpO1xuICAgIH1cblxuICAgIHJlZnJlc2goKXtcbiAgICAgICAgdGhpcy5zaWRlbmF2RE9NLnJlbmRlclByb2plY3RzKHRoaXMucHJvamVjdExpc3QpO1xuICAgIH1cblxuICAgIHNldE1lZGlhdG9yKG1lZGlhdG9yKXtcbiAgICAgICAgdGhpcy5tZWRpYXRvciA9IG1lZGlhdG9yO1xuICAgIH0gIFxuXG4gICAgcmVjZWl2ZU5vdGlmaWNhdGlvbihldmVudFR5cGUsIGRhdGEpe1xuXG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2lkZW5hdjsiLCJpbXBvcnQgQXNpZGVVSSBmcm9tIFwiLi9hc2lkZVVJLmpzXCI7XG5pbXBvcnQgQXNpZGVET00gZnJvbSBcIi4vYXNpZGVET00uanNcIjtcblxuXG5jbGFzcyBBc2lkZSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5jdXJyVGFzayA9IG51bGw7XG4gICAgICAgIHRoaXMubWVkaWF0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmFzaWRlVUkgPSBuZXcgQXNpZGVVSSh0aGlzKTtcbiAgICAgICAgdGhpcy5hc2lkZURPTSA9IG5ldyBBc2lkZURPTSgpO1xuICAgIH1cblxuICAgIGluaXQoKXtcbiAgICAgICAgdGhpcy5hc2lkZVVJLmxvYWRVSSgpO1xuICAgIH1cblxuICAgIHJlZnJlc2goKXtcbiAgICAgICAgdGhpcy5hc2lkZURPTS5yZW5kZXJUYXNrSW5mbyh0aGlzLmN1cnJUYXNrKTtcbiAgICB9XG5cbiAgICBzaG93VGFza0luZm8oKXtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIHRoaXMuYXNpZGVVSS5vcGVuQXNpZGUoKTtcbiAgICB9XG5cbiAgICBzZXRDdXJyVGFzayh0YXNrKXtcbiAgICAgICAgdGhpcy5jdXJyVGFzayA9IHRhc2s7XG4gICAgfVxuXG4gICAgc2V0TWVkaWF0b3IobWVkaWF0b3Ipe1xuICAgICAgICB0aGlzLm1lZGlhdG9yID0gbWVkaWF0b3I7XG4gICAgfVxuXG4gICAgcmVjZWl2ZU5vdGlmaWNhdGlvbihldmVudFR5cGUsIGRhdGEpe1xuICAgICAgICBpZihldmVudFR5cGUgPT0gJ3Rhc2tTZWxlY3RlZCcpe1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJyVGFzayhkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd1Rhc2tJbmZvKCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBc2lkZTsiLCJpbXBvcnQgTWFpblVJIGZyb20gXCIuL21haW5VSS5qc1wiO1xuaW1wb3J0IE1haW5ET00gZnJvbSBcIi4vbWFpbkRPTS5qc1wiO1xuXG5jbGFzcyBNYWluIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmN1cnJQcm9qZWN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy50YXNrTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLm1lZGlhdG9yID0gbnVsbDtcblxuICAgICAgICB0aGlzLm1haW5VSSA9IG5ldyBNYWluVUkodGhpcyk7XG4gICAgICAgIHRoaXMubWFpbkRPTSA9IG5ldyBNYWluRE9NKCk7XG4gICAgfVxuXG4gICAgaW5pdCgpe1xuICAgICAgICB0aGlzLm1haW5VSS5sb2FkVUkoKTtcbiAgICB9XG5cbiAgICByZWZyZXNoKCl7XG4gICAgICAgIHRoaXMubWFpbkRPTS5yZW5kZXJUYXNrcyh0aGlzLmN1cnJQcm9qZWN0LCB0aGlzLnRhc2tNYXApO1xuICAgIH1cblxuICAgIGxvYWRQcm9qZWN0RGF0YShwcm9qZWN0KXtcbiAgICAgICAgdGhpcy5jdXJyUHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgIHRoaXMudGFza01hcC5jbGVhcigpO1xuXG4gICAgICAgIGxldCB0b2RvTGlzdCA9IHRoaXMuY3VyclByb2plY3QudG9kb0xpc3Q7XG4gICAgICAgIHRvZG9MaXN0LmZvckVhY2goKHRvZG8pID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFza01hcC5zZXQodGhpcy5nZXRVSUQoKSwgdG9kbyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFVJRCgpe1xuICAgICAgICBsZXQgcmFuZG9tTnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMWU5KTtcbiAgICAgICAgcmV0dXJuIHJhbmRvbU51bS50b1N0cmluZygzNik7XG4gICAgfVxuXG4gICAgc2V0TWVkaWF0b3IobWVkaWF0b3Ipe1xuICAgICAgICB0aGlzLm1lZGlhdG9yID0gbWVkaWF0b3I7XG4gICAgfVxuXG4gICAgcmVjZWl2ZU5vdGlmaWNhdGlvbihldmVudFR5cGUsIGRhdGEpe1xuICAgICAgICBpZihldmVudFR5cGUgPT0gJ3Byb2plY3RTZWxlY3RlZCcpe1xuICAgICAgICAgICAgdGhpcy5sb2FkUHJvamVjdERhdGEoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1haW47Il0sIm5hbWVzIjpbImNvbnN0cnVjdG9yIiwiYXNpZGUiLCJ0aGlzIiwiY2xvc2VBc2lkZUJ0biIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFzaWRlQ29udGFpbmVyIiwibG9hZFVJIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsb3NlQXNpZGUiLCJzdHlsZSIsIndpZHRoIiwibWVkaWF0b3IiLCJub3RpZnkiLCJvcGVuQXNpZGUiLCJ0YXNrVGl0bGVFbGVtZW50IiwiY2hlY2tsaXN0RWxlbWVudCIsImR1ZURhdGVFbGVtZW50Iiwibm90ZUVsZW1lbnQiLCJjcmVhdGVEYXRlRWxlbWVudCIsInByaW9yaXR5RWxlbWVudCIsInJlbmRlclRhc2tJbmZvIiwidGFzayIsInRleHRDb250ZW50IiwidGl0bGUiLCJkdWVEYXRlIiwibm90ZSIsInByaW9yaXR5IiwiY3JlYXRlRGF0ZSIsImlubmVySFRNTCIsInN0ZXAiLCJjaGVja2xpc3QiLCJsaXN0RWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImRlZmF1bHRMaXN0IiwidXNlckxpc3QiLCJ0eXBlIiwiY2xhc3NMaXN0IiwiZWxlbWVudCIsImZvckVhY2giLCJ2YWx1ZSIsImFkZCIsImNyZWF0ZVRpdGxlRWxlbWVudCIsInRpdGxlRWxlbWVudCIsImNyZWF0ZVRhc2tDb3VudGVyIiwiY291bnQiLCJ0YXNrQ291bnRlckVsZW1lbnQiLCJjcmVhdGVQcm9qZWN0SXRlbSIsInByb2plY3RJZCIsInByb2plY3QiLCJwcm9qZWN0SXRlbSIsImRhdGFzZXQiLCJ1aWQiLCJ0b2RvTGlzdCIsImxlbmd0aCIsInJlbmRlclByb2plY3RzIiwibGlzdCIsInNpZGVuYXYiLCJzaWRlbmF2Q29udGFpbmVyIiwiYWRkUHJvamVjdEJ0biIsImNsb3NlU2lkZW5hdkJ0biIsIm9wZW5TaWRlbmF2QnRuIiwiZSIsImNsb3NlU2lkZU5hdiIsIm9wZW5TaWRlTmF2Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsInJlbW92ZUF0dHJpYnV0ZSIsInRhcmdldCIsInByb2plY3RMaXN0IiwiZ2V0IiwibWFpbiIsInRhc2tMaXN0IiwiYWRkVGFza0J0biIsInRhc2tNYXAiLCJ0YXNrbGlzdENvbnRhaW5lciIsImNyZWF0ZVRhc2tJdGVtIiwidGFza0lkIiwidGFza05hbWUiLCJ0YXNrSXRlbSIsInJlbmRlclRhc2tzIiwidGFza2xpc3QiLCJhZGRUb2RvIiwidG9kbyIsInB1c2giLCJyZW1vdmVUb2RvIiwiZmlsdGVyIiwiY3VyciIsIlN0ZXAiLCJpc0NvbXBsZXRlIiwiVG9kbyIsIkRhdGUiLCJ0b0RhdGVTdHJpbmciLCJhZGRTdGVwIiwiY2hhbmdlU3RhdHVzIiwiY2hhbmdlUHJpb3JpdHkiLCJjaGFuZ2VEdWVEYXRlIiwiZGF0ZSIsInRvZG9BcnJheSIsImRlZmF1bHRQcm9qZWN0cyIsInByb2plY3RzIiwiUHJvamVjdExpc3QiLCJNYXAiLCJpbml0Iiwic2V0IiwiZ2V0VUlEIiwiYWRkUHJvamVjdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRvU3RyaW5nIiwiY29tcG9uZW50cyIsIlNldCIsInJlZ2lzdGVyIiwiY29tcG9uZW50Iiwic2V0TWVkaWF0b3IiLCJ1bnJlZ2lzdGVyIiwiZGVsZXRlIiwic2VuZGVyIiwiZXZlbnRUeXBlIiwiZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJyZWNlaXZlTm90aWZpY2F0aW9uIiwic2lkZW5hdkRPTSIsInNpZGVuYXZVSSIsInNlbGVjdERlZmF1bHRQcm9qZWN0IiwidmFsdWVzIiwibmV4dCIsInJlZnJlc2giLCJjdXJyVGFzayIsImFzaWRlVUkiLCJhc2lkZURPTSIsInNob3dUYXNrSW5mbyIsInNldEN1cnJUYXNrIiwiY3VyclByb2plY3QiLCJtYWluVUkiLCJtYWluRE9NIiwibG9hZFByb2plY3REYXRhIiwiY2xlYXIiXSwic291cmNlUm9vdCI6IiJ9